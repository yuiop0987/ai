#Naive Bayes on Diabetes Dataset


import pandas as pd

class NaiveBayesClassifier:

    def __init__(self, X, y):

        '''
        X and y denote the features and the target labels respectively
        '''
        self.X, self.y = X, y

        self.N = len(self.X) # Length of the training set

        self.dim = len(self.X[0]) # Dimension of the vector of features

        self.attrs = [[] for _ in range(self.dim)] # Here we'll store the columns of the training set

        self.output_dom = {} # Output classes with the number of occurrences in the training set. In this case, we have only 2 classes

        self.data = [] # To store every row [Xi, yi]


        for i in range(self.N):
            for j in range(self.dim):
                # if we have never seen this value for this attr before,
                # then we add it to the attrs array in the corresponding position
                if not self.X[i][j] in self.attrs[j]:
                    self.attrs[j].append(self.X[i][j])

            # if we have never seen this output class before,
            # then we add it to the output_dom and count one occurrence for now
            if not self.y[i] in self.output_dom.keys():
                self.output_dom[self.y[i]] = 1
            # otherwise, we increment the occurrence of this output in the training set by 1
            else:
                self.output_dom[self.y[i]] += 1
            # store the row
            self.data.append([self.X[i], self.y[i]])



    def classify(self, entry):

        solve = None # Final result
        max_arg = -1 # partial maximum

        for y in self.output_dom.keys():

            prob = self.output_dom[y]/self.N # P(y)

            for i in range(self.dim):
                cases = [x for x in self.data if x[0][i] == entry[i] and x[1] == y] # all rows with Xi = xi
                n = len(cases)

                prob *= n/self.N # P *= P(Xi = xi)

            # if we have a greater prob for this output than the partial maximum...
            if prob > max_arg:
                max_arg = prob
                solve = y

        return solve

data = pd.read_csv('diabetes.csv')

print(data.head())

# Convert target labels to string (if necessary)
y = list(map(lambda v: 'yes' if v == 1 else 'no', data['Outcome'].values))

# Features
X = data.iloc[:,:-1].values
# Create an instance of the NaiveBayesClassifier class
naive_bayes = NaiveBayesClassifier(X, y)

# Now you can use the classifier to classify new instances
# For example:
entry_to_classify = [6, 148, 72, 35, 0, 33.6, 0.627, 50]
classification_result = naive_bayes.classify(entry_to_classify)
print("Classification result:", classification_result)
